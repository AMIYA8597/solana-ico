use anchor_lang::prelude::*;
use anchor_spl::{
    associated_token::AssociatedToken,
    token::{self, Mint, TokenAccount, Transfer},
};

declare_id!("YdBghRfwjmeutTCMocDyDbpFDogXQxrr1Zo6fWXqrH8");

#[program]
pub mod advanced_ico_program {
    use super::*;

    // Initialize the ICO
    pub fn initialize(
        ctx: Context<Initialize>,
        total_supply: u64,
        token_price: u64,
        start_time: i64,
        duration: i64,
        round_type: RoundType,
    ) -> Result<()> {
        let ico = &mut ctx.accounts.ico_account;
        ico.authority = ctx.accounts.authority.key();
        ico.token_mint = ctx.accounts.token_mint.key();
        ico.total_supply = total_supply;
        ico.token_price = token_price;
        ico.start_time = start_time;
        ico.duration = duration;
        ico.tokens_sold = 0;
        ico.is_active = true;
        ico.round_type = round_type;
        ico.seed_investors = Vec::new(); // Initialize empty seed investors list

        Ok(())
    }

    // Update ICO parameters
    pub fn update_ico_parameters(
        ctx: Context<UpdateIcoParameters>,
        total_supply: Option<u64>,
        token_price: Option<u64>,
        start_time: Option<i64>,
        duration: Option<i64>,
        round_type: Option<RoundType>,
    ) -> Result<()> {
        let ico = &mut ctx.accounts.ico_account;

        // Ensure only the ICO authority can update parameters
        require!(
            ctx.accounts.authority.key() == ico.authority,
            IcoError::Unauthorized
        );

        // Update parameters if provided
        if let Some(supply) = total_supply {
            ico.total_supply = supply;
        }

        if let Some(price) = token_price {
            ico.token_price = price;
        }

        if let Some(start) = start_time {
            ico.start_time = start;
        }

        if let Some(dur) = duration {
            ico.duration = dur;
        }

        if let Some(round) = round_type {
            ico.round_type = round;
        }

        Ok(())
    }

    // Add a seed investor to the whitelist
    pub fn add_seed_investor(ctx: Context<AddSeedInvestor>, investor: Pubkey) -> Result<()> {
        let ico = &mut ctx.accounts.ico_account;

        // Ensure only the ICO authority can add seed investors
        require!(
            ctx.accounts.authority.key() == ico.authority,
            IcoError::Unauthorized
        );

        // Add the investor to the whitelist
        ico.seed_investors.push(investor);

        Ok(())
    }

    // Remove a seed investor from the whitelist
    pub fn remove_seed_investor(ctx: Context<RemoveSeedInvestor>, investor: Pubkey) -> Result<()> {
        let ico = &mut ctx.accounts.ico_account;

        // Ensure only the ICO authority can remove seed investors
        require!(
            ctx.accounts.authority.key() == ico.authority,
            IcoError::Unauthorized
        );

        // Find and remove the investor from the whitelist
        if let Some(index) = ico.seed_investors.iter().position(|&x| x == investor) {
            ico.seed_investors.remove(index);
        }

        Ok(())
    }

    // Buy tokens during the ICO
    pub fn buy_tokens(ctx: Context<BuyTokens>, amount: u64) -> Result<()> {
        let current_time = Clock::get()?.unix_timestamp;
        let ico = &mut ctx.accounts.ico_account;

        // Validate ICO status and token availability
        require!(
            ico.is_active
                && current_time >= ico.start_time
                && current_time < ico.start_time + ico.duration,
            IcoError::IcoNotActive
        );

        // Special whitelist check for Seed Round
        if ico.round_type == RoundType::SeedRound {
            require!(
                ico.seed_investors.contains(&ctx.accounts.buyer.key()),
                IcoError::NotWhitelisted
            );
        }

        require!(
            ico.tokens_sold + amount <= ico.total_supply,
            IcoError::InsufficientTokens
        );

        // Calculate total cost
        let total_cost = amount
            .checked_mul(ico.token_price)
            .ok_or(IcoError::MathOverflow)?;

        // Transfer SOL to treasury
        let transfer_context = CpiContext::new(
            ctx.accounts.system_program.to_account_info(),
            anchor_lang::system_program::Transfer {
                from: ctx.accounts.buyer.to_account_info(),
                to: ctx.accounts.treasury_wallet.to_account_info(),
            },
        );
        anchor_lang::system_program::transfer(transfer_context, total_cost)?;

        // Update purchase tracking
        let purchase = &mut ctx.accounts.purchase_account;
        purchase.buyer = ctx.accounts.buyer.key();
        purchase.amount = purchase
            .amount
            .checked_add(amount)
            .ok_or(IcoError::MathOverflow)?;
        purchase.is_distributed = false;

        // Update ICO tracking
        ico.tokens_sold = ico
            .tokens_sold
            .checked_add(amount)
            .ok_or(IcoError::MathOverflow)?;

        // Emit purchase event
        emit!(TokenPurchaseEvent {
            buyer: ctx.accounts.buyer.key(),
            amount,
            price: ico.token_price,
            round_type: ico.round_type.clone(),
        });

        Ok(())
    }

    // Distribute tokens to buyers
    pub fn distribute_tokens(ctx: Context<DistributeTokens>) -> Result<()> {
        let ico = &mut ctx.accounts.ico_account;

        // Ensure ICO is not active and tokens have been sold
        require!(!ico.is_active, IcoError::IcoStillActive);
        require!(ico.tokens_sold > 0, IcoError::InsufficientTokens);

        // Validate caller is ICO authority
        require!(
            ctx.accounts.authority.key() == ico.authority,
            IcoError::Unauthorized
        );

        // Perform token transfer from treasury to buyer's token account
        let transfer_context = CpiContext::new(
            ctx.accounts.token_program.to_account_info(),
            Transfer {
                from: ctx.accounts.treasury_token_account.to_account_info(),
                to: ctx.accounts.buyer_token_account.to_account_info(),
                authority: ctx.accounts.authority.to_account_info(),
            },
        );

        // Transfer tokens equal to purchase amount
        token::transfer(transfer_context, ctx.accounts.purchase_account.amount)?;

        // Mark purchase as distributed
        let purchase = &mut ctx.accounts.purchase_account;
        purchase.is_distributed = true;

        // Emit distribution event
        emit!(PurchaseEvent {
            buyer: purchase.buyer,
            amount: purchase.amount,
            is_distributed: true,
        });

        Ok(())
    }

    // End the ICO
    pub fn end_ico(ctx: Context<EndIco>) -> Result<()> {
        let ico = &mut ctx.accounts.ico_account;
        let current_time = Clock::get()?.unix_timestamp;

        require!(
            current_time >= ico.start_time + ico.duration,
            IcoError::IcoStillActive
        );

        ico.is_active = false;
        Ok(())
    }

    // Get seed investors (utility function)
    pub fn get_seed_investors(ctx: Context<GetSeedInvestors>) -> Result<()> {
        let ico = &ctx.accounts.ico_account;
        msg!("Number of seed investors: {}", ico.seed_investors.len());
        for (index, investor) in ico.seed_investors.iter().enumerate() {
            msg!("Seed Investor {}: {}", index + 1, investor);
        }

        Ok(())
    }
}

// Fundraising Round Types
#[derive(AnchorSerialize, AnchorDeserialize, Clone, PartialEq)]
pub enum RoundType {
    SeedRound,
    PreICO,
    PublicICO,
}

impl Default for RoundType {
    fn default() -> Self {
        RoundType::SeedRound
    }
}

// Events
#[event]
pub struct TokenPurchaseEvent {
    pub buyer: Pubkey,
    pub amount: u64,
    pub price: u64,
    pub round_type: RoundType,
}

#[event]
pub struct PurchaseEvent {
    pub buyer: Pubkey,
    pub amount: u64,
    pub is_distributed: bool,
}

// Purchase Account
#[account]
#[derive(Default)]
pub struct PurchaseAccount {
    pub buyer: Pubkey,
    pub amount: u64,
    pub is_distributed: bool,
}

// ICO Account
#[account]
#[derive(Default)]
pub struct IcoAccount {
    pub authority: Pubkey,
    pub token_mint: Pubkey,
    pub total_supply: u64,
    pub token_price: u64,
    pub tokens_sold: u64,
    pub start_time: i64,
    pub duration: i64,
    pub is_active: bool,
    pub round_type: RoundType,
    pub seed_investors: Vec<Pubkey>,
}

// Account Structs
#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(mut)]
    pub authority: Signer<'info>,
    #[account(
        init, 
        payer = authority, 
        space = 8 + 32 + 2 + 8 + 6 + 1 + 1 + 4 + (32 * 100),
        seeds = [b"ico"],
        bump
    )]
    pub ico_account: Account<'info, IcoAccount>,
    #[account(mut)]
    pub token_mint: Account<'info, Mint>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct UpdateIcoParameters<'info> {
    #[account(mut)]
    pub authority: Signer<'info>,
    #[account(
        mut,
        seeds = [b"ico"],
        bump
    )]
    pub ico_account: Account<'info, IcoAccount>,
}

#[derive(Accounts)]
pub struct BuyTokens<'info> {
    #[account(mut)]
    pub buyer: Signer<'info>,
    #[account(
        mut,
        seeds = [b"ico"],
        bump
    )]
    pub ico_account: Account<'info, IcoAccount>,
    #[account(
        init_if_needed,
        payer = buyer, 
        space = 8 + 32 + 8 + 1,
        seeds = [b"purchase", buyer.key().as_ref()],
        bump
    )]
    pub purchase_account: Account<'info, PurchaseAccount>,
    #[account(mut)]
    pub treasury_wallet: SystemAccount<'info>,
    pub token_program: Program<'info, token::Token>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct DistributeTokens<'info> {
    #[account(mut)]
    pub authority: Signer<'info>,
    #[account(
        mut,
        seeds = [b"ico"],
        bump
    )]
    pub ico_account: Account<'info, IcoAccount>,
    #[account(mut)]
    pub treasury_token_account: Account<'info, TokenAccount>,
    #[account(mut)]
    pub buyer_token_account: Account<'info, TokenAccount>,
    #[account(
        mut,
        seeds = [b"purchase", purchase_account.buyer.as_ref()],
        bump
    )]
    pub purchase_account: Account<'info, PurchaseAccount>,
    pub token_program: Program<'info, token::Token>,
}

#[derive(Accounts)]
pub struct EndIco<'info> {
    #[account(
        mut,
        seeds = [b"ico"],
        bump
    )]
    pub ico_account: Account<'info, IcoAccount>,
}

#[derive(Accounts)]
pub struct AddSeedInvestor<'info> {
    #[account(mut)]
    pub authority: Signer<'info>,
    #[account(
        mut,
        seeds = [b"ico"],
        bump
    )]
    pub ico_account: Account<'info, IcoAccount>,
}

#[derive(Accounts)]
pub struct RemoveSeedInvestor<'info> {
    #[account(mut)]
    pub authority: Signer<'info>,
    #[account(
        mut,
        seeds = [b"ico"],
        bump
    )]
    pub ico_account: Account<'info, IcoAccount>,
}

#[derive(Accounts)]
pub struct GetSeedInvestors<'info> {
    #[account(
        seeds = [b"ico"],
        bump
    )]
    pub ico_account: Account<'info, IcoAccount>,
}

// Error Handling
#[error_code]
pub enum IcoError {
    #[msg("ICO is not currently active")]
    IcoNotActive,
    #[msg("Insufficient tokens remaining")]
    InsufficientTokens,
    #[msg("ICO is still active")]
    IcoStillActive,
    #[msg("You are not authorized to perform this action")]
    Unauthorized,
    #[msg("Purchase account not found")]
    PurchaseAccountNotFound,
    #[msg("Buyer token account not found")]
    BuyerTokenAccountNotFound,
    #[msg("Mathematical overflow occurred")]
    MathOverflow,
    #[msg("Investor is not whitelisted for the seed round")]
    NotWhitelisted,
}

















base on this smart contract i craete a ICO project where i create pages firstly, owner address create  the ICO supply and then render the page to the BUYtoken pages, this is my buyToken.js page under components folder:   




import React, { useState } from 'react';
import { useConnection, useWallet } from '@solana/wallet-adapter-react';
import { PublicKey } from '@solana/web3.js';
import { getProgram } from '../utils/anchor-connection';
import * as anchor from '@project-serum/anchor';
import { TOKEN_PROGRAM_ID, getAssociatedTokenAddress, createAssociatedTokenAccountInstruction, ASSOCIATED_TOKEN_PROGRAM_ID } from '@solana/spl-token';
import { Buffer } from "buffer";
window.Buffer = window.Buffer || Buffer;

const BuyTokens = ({ icoDetails, onPurchase }) => {
  const { connection } = useConnection();
  const wallet = useWallet();
  const [amount, setAmount] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const handleBuyTokens = async (e) => {
    e.preventDefault();
    if (!wallet.publicKey || !wallet.signTransaction) {
      setError('Please connect your wallet');
      return;
    }

    setLoading(true);
    setError('');
    setSuccess('');

    try {
      const program = getProgram(connection, wallet);
      
      // Get ICO PDA
      const [icoAccount] = await anchor.web3.PublicKey.findProgramAddress(
        [Buffer.from("ico")],
        program.programId
      );

      // Set up account addresses
      const tokenMintAddress = new PublicKey('AhmbnmLBQWNy3zQMwi6g7s5tGFmbKZEfUczNkevZWFtX');
      const treasuryWallet = new PublicKey('DYkCAokwibanNxMvixmoZFQDwayGDJWfJ9moZjDRpUvW');
      
      // Get ICO account data
      const icoAccountInfo = await program.account.icoAccount.fetch(icoAccount);
      const authority = icoAccountInfo.authority;

      // Get token accounts
      const tokenAccount = await getAssociatedTokenAddress(
        tokenMintAddress,
        authority,
        true // allowOwnerOffCurve set to true for PDA
      );

      const buyerTokenAccount = await getAssociatedTokenAddress(
        tokenMintAddress,
        wallet.publicKey
      );

      // Check if buyer's token account exists
      let buyerAccountInfo;
      try {
        buyerAccountInfo = await connection.getAccountInfo(buyerTokenAccount);
      } catch (err) {
        console.error('Error checking buyer token account:', err);
      }

      let transaction = new anchor.web3.Transaction();

      // Create buyer's token account if it doesn't exist
      if (!buyerAccountInfo) {
        console.log('Creating buyer token account...');
        const createAtaIx = createAssociatedTokenAccountInstruction(
          wallet.publicKey, // payer
          buyerTokenAccount, // ata
          wallet.publicKey, // owner
          tokenMintAddress, // mint
        );
        transaction.add(createAtaIx);
      }

      console.log('Setting up buy instruction with accounts:', {
        buyer: wallet.publicKey.toBase58(),
        icoAccount: icoAccount.toBase58(),
        authority: authority.toBase58(),
        treasuryWallet: treasuryWallet.toBase58(),
        tokenAccount: tokenAccount.toBase58(),
        buyerTokenAccount: buyerTokenAccount.toBase58(),
      });

      // Add buy tokens instruction
      const buyInstruction = await program.methods
        .buyTokens(new anchor.BN(amount))
        .accounts({
          buyer: wallet.publicKey,
          icoAccount: icoAccount,
          authority: authority,
          treasuryWallet: treasuryWallet,
          tokenAccount: tokenAccount,
          buyerTokenAccount: buyerTokenAccount,
          tokenProgram: TOKEN_PROGRAM_ID,
          systemProgram: anchor.web3.SystemProgram.programId
        })
        .instruction();

      transaction.add(buyInstruction);

      // Send and confirm transaction
      const signature = await wallet.sendTransaction(transaction, connection);
      await connection.confirmTransaction(signature, 'confirmed');

      console.log('Transaction successful:', signature);
      setSuccess(`Transaction successful! Signature: ${signature}`);
      onPurchase();
    } catch (err) {
      console.error('Detailed error:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const calculateTotalCost = () => {
    if (!amount || !icoDetails?.tokenPrice) return 0;
    return (amount * icoDetails.tokenPrice) / anchor.web3.LAMPORTS_PER_SOL;
  };

  if (!icoDetails || !icoDetails.isActive) {
    return <div className="buy-tokens">ICO is not active</div>;
  }

  return (
    <div className="buy-tokens">
      <h2>Buy Tokens</h2>
      {!wallet.connected ? (
        <div className="connect-wallet-message">
          Please connect your wallet to buy tokens
        </div>
      ) : (
        <form onSubmit={handleBuyTokens}>
          <div className="form-group">
            <label htmlFor="amount">Amount of tokens:</label>
            <input
              type="number"
              id="amount"
              value={amount}
              onChange={(e) => setAmount(e.target.value)}
              placeholder="Enter number of tokens to buy"
              min="1"
              required
            />
            <small>Price per token: {icoDetails?.tokenPrice ? 
              `${icoDetails.tokenPrice / anchor.web3.LAMPORTS_PER_SOL} SOL` : 
              'Loading...'}</small>
          </div>
          <div className="total-cost">
            Total Cost: {calculateTotalCost()} SOL
          </div>
          <button 
            type="submit" 
            disabled={loading || !amount || amount <= 0}>
            {loading ? 'Processing...' : 'Buy Tokens'}
          </button>
        </form>
      )}
      {error && <div className="error-message">{error}</div>}
      {success && <div className="success-message">{success}</div>}

     
    </div>
  );
};

export default BuyTokens;








in buyToken pages i tried to buy some tokens and facing this error when i try to give the input field value as of 100, that time phantom pop up incoming and then after popup show this error in UI "Error: Unexpected error", I already added token account in there still facing this issue, fix the issue and regenerate the full file again



Now in this current js file, after clicking the buyToken Button phantom wallet is popup successfully and then when i click confirm the transaction, that time  facing this error :  "Error: Failed to setup token account",

BTW my current owner wallet address is    "DYkCAokwibanNxMvixmoZFQDwayGDJWfJ9moZjDRpUvW"

so solve the error, and regenerate the full file and if any changes needed tell me that also






and base on the smart contract i create this files in my reactjs project










src/component/BuyTokens.js


import React, { useState, useEffect } from 'react';
import { useConnection, useWallet } from '@solana/wallet-adapter-react';
import { PublicKey, Transaction, sendAndConfirmTransaction } from '@solana/web3.js';
import { getProgram } from '../utils/anchor-connection';
import * as anchor from '@project-serum/anchor';
import { 
  TOKEN_PROGRAM_ID, 
  getAssociatedTokenAddress, 
  createAssociatedTokenAccountInstruction, 
  getAccount,
  ASSOCIATED_TOKEN_PROGRAM_ID
} from '@solana/spl-token';
import { Buffer } from "buffer";
window.Buffer = window.Buffer || Buffer;

const BuyTokens = ({ icoDetails, onPurchase }) => {
  const { connection } = useConnection();
  const wallet = useWallet();
  const [amount, setAmount] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [buyerTokenAccount, setBuyerTokenAccount] = useState(null);

  const tokenMintAddress = new PublicKey('AhmbnmLBQWNy3zQMwi6g7s5tGFmbKZEfUczNkevZWFtX');
  const treasuryWallet = new PublicKey('DYkCAokwibanNxMvixmoZFQDwayGDJWfJ9moZjDRpUvW');

  useEffect(() => {
    const setupBuyerTokenAccount = async () => {
      if (wallet.publicKey) {
        try {
          const ata = await getAssociatedTokenAddress(
            tokenMintAddress,
            wallet.publicKey
          );
          setBuyerTokenAccount(ata);
          console.log('Buyer token account set up:', ata.toBase58());
        } catch (err) {
          console.error('Error setting up buyer token account:', err);
          setError('Failed to set up buyer token account: ' + err.message);
        }
      }
    };

    setupBuyerTokenAccount();
  }, [wallet.publicKey]);

  const handleBuyTokens = async (e) => {
    e.preventDefault();
    if (!wallet.publicKey || !wallet.signTransaction) {
      setError('Please connect your wallet');
      return;
    }

    setLoading(true);
    setError('');
    setSuccess('');

    try {
      console.log('Starting token purchase process...');
      const program = getProgram(connection, wallet);
      
      const [icoAccount] = await PublicKey.findProgramAddress(
        [Buffer.from("ico")],
        program.programId
      );
      console.log('ICO Account:', icoAccount.toBase58());

      const icoAccountInfo = await program.account.icoAccount.fetch(icoAccount);
      const authority = icoAccountInfo.authority;
      console.log('ICO Authority:', authority.toBase58());

      const tokenAccount = await getAssociatedTokenAddress(
        tokenMintAddress,
        authority,
        true
      );
      console.log('Token Account:', tokenAccount.toBase58());

      if (!buyerTokenAccount) {
        throw new Error('Buyer token account not set up');
      }
      console.log('Buyer Token Account:', buyerTokenAccount.toBase58());

      let transaction = new Transaction();

      // Check if buyer's token account exists and create if it doesn't
      try {
        await getAccount(connection, buyerTokenAccount);
        console.log('Buyer token account already exists');
      } catch (err) {
        console.log('Creating buyer token account...');
        const createAtaIx = createAssociatedTokenAccountInstruction(
          wallet.publicKey,
          buyerTokenAccount,
          wallet.publicKey,
          tokenMintAddress
        );
        transaction.add(createAtaIx);
      }

      console.log('Creating buy instruction...');
      const buyInstruction = await program.methods
        .buyTokens(new anchor.BN(amount))
        .accounts({
          buyer: wallet.publicKey,
          icoAccount: icoAccount,
          authority: authority,
          treasuryWallet: treasuryWallet,
          tokenAccount: tokenAccount,
          buyerTokenAccount: buyerTokenAccount,
          tokenProgram: TOKEN_PROGRAM_ID,
          associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
          systemProgram: anchor.web3.SystemProgram.programId
        })
        .instruction();

      transaction.add(buyInstruction);

      console.log('Sending transaction...');
      const signature = await sendAndConfirmTransaction(
        connection,
        transaction,
        [wallet.publicKey],
        { commitment: 'confirmed' }
      );

      console.log('Transaction successful:', signature);
      setSuccess(`Transaction successful! Signature: ${signature}`);
      onPurchase();
    } catch (err) {
      console.error('Detailed error:', err);
      setError(err instanceof Error ? err.message : 'An unknown error occurred');
    } finally {
      setLoading(false);
    }
  };

  const calculateTotalCost = () => {
    if (!amount || !icoDetails?.tokenPrice) return 0;
    return (Number(amount) * icoDetails.tokenPrice) / anchor.web3.LAMPORTS_PER_SOL;
  };

  if (!icoDetails || !icoDetails.isActive) {
    return <div className="buy-tokens">ICO is not active</div>;
  }

  return (
    <div className="buy-tokens">
      <h2>Buy Tokens</h2>
      {!wallet.connected ? (
        <div className="connect-wallet-message">
          Please connect your wallet to buy tokens
        </div>
      ) : (
        <form onSubmit={handleBuyTokens}>
          <div className="form-group">
            <label htmlFor="amount">Amount of tokens:</label>
            <input
              type="number"
              id="amount"
              value={amount}
              onChange={(e) => setAmount(e.target.value)}
              placeholder="Enter number of tokens to buy"
              min="1"
              required
            />
            <small>Price per token: {icoDetails?.tokenPrice ? 
              `${icoDetails.tokenPrice / anchor.web3.LAMPORTS_PER_SOL} SOL` : 
              'Loading...'}</small>
          </div>
          <div className="total-cost">
            Total Cost: {calculateTotalCost()} SOL
          </div>
          <button 
            type="submit" 
            disabled={loading || !amount || Number(amount) <= 0}>
            {loading ? 'Processing...' : 'Buy Tokens'}
          </button>
        </form>
      )}
      {error && <div className="error-message">{error}</div>}
      {success && <div className="success-message">{success}</div>}
    </div>
  );
};

export default BuyTokens;




src/component/Dashboard.js



import React, { useState, useEffect } from 'react';
import { useConnection, useWallet } from '@solana/wallet-adapter-react';
import { PublicKey } from '@solana/web3.js';
import { getProgram, findProgramAddress } from '../utils/anchor-connection';
import IcoDetails from './IcoDetails';
import BuyTokens from './BuyTokens';
import TokenBalance from './TokenBalance';
import InitializeIco from './InitializeIco';
import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';
import * as anchor from '@project-serum/anchor';
import { Buffer } from "buffer";
window.Buffer = window.Buffer || Buffer;

const Dashboard = () => {
  const { connection } = useConnection();
  const wallet = useWallet();
  const [icoDetails, setIcoDetails] = useState(null);
  const [loading, setLoading] = useState(true);

  const fetchIcoDetails = async () => {
    if (!wallet.publicKey) return;

    try {
      const program = getProgram(connection, wallet);
      const { publicKey: icoAccount } = await findProgramAddress(
        [anchor.utils.bytes.utf8.encode('ico')],
        program.programId
      );

      const account = await program.account.icoAccount.fetch(icoAccount);
      setIcoDetails(account);
    } catch (error) {
      console.error('Error fetching ICO details:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchIcoDetails();
  }, [connection, wallet]);

  if (!wallet.connected) {
    return (
      <div className="dashboard">
        <h2>Connect your wallet to view the ICO dashboard</h2>
        <WalletMultiButton />
      </div>
    );
  }

  if (loading) {
    return <div className="dashboard">Loading ICO details...</div>;
  }

  return (
    <div className="dashboard">
      {icoDetails ? (
        <>
          <IcoDetails icoDetails={icoDetails} />
          <TokenBalance />
          <BuyTokens icoDetails={icoDetails} onPurchase={fetchIcoDetails} />
        </>
      ) : (
        <InitializeIco onInitialize={fetchIcoDetails} />
      )}
    </div>
  );
};

export default Dashboard;





src/component/Footer.js

import React from 'react';

const Footer = () => {
  return (
    <footer className="app-footer">
      <p>&copy; 2023 Solana ICO Dashboard. All rights reserved.</p>
    </footer>
  );
};

export default Footer;




src/component/Header.js



import React from 'react';
import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';

const Header = () => {
  return (
    <header className="app-header">
      <h1>Solana ICO Dashboard</h1>
      <WalletMultiButton />
    </header>
  );
};

export default Header;





src/component/IcoDetails.js





import React from 'react';
import { Buffer } from "buffer";
window.Buffer = window.Buffer || Buffer;

const IcoDetails = ({ icoDetails }) => {
  if (!icoDetails) return null;

  return (
    <div className="ico-details">
      <h2>ICO Details</h2>
      <div className="detail-grid">
        <div className="detail-item">
          <span className="detail-label">Total Supply:</span>
          <span className="detail-value">{icoDetails.totalSupply.toString()}</span>
        </div>
        <div className="detail-item">
          <span className="detail-label">Token Price:</span>
          <span className="detail-value">{icoDetails.tokenPrice.toString()} lamports</span>
        </div>
        <div className="detail-item">
          <span className="detail-label">Tokens Sold:</span>
          <span className="detail-value">{icoDetails.tokensSold.toString()}</span>
        </div>
        <div className="detail-item">
          <span className="detail-label">Start Time:</span>
          <span className="detail-value">{new Date(icoDetails.startTime.toNumber() * 1000).toLocaleString()}</span>
        </div>
        <div className="detail-item">
          <span className="detail-label">Duration:</span>
          <span className="detail-value">{icoDetails.duration.toString()} seconds</span>
        </div>
        <div className="detail-item">
          <span className="detail-label">Status:</span>
          <span className={`detail-value status ${icoDetails.isActive ? 'active' : 'inactive'}`}>
            {icoDetails.isActive ? 'Active' : 'Inactive'}
          </span>
        </div>
      </div>
    </div>
  );
};

export default IcoDetails;






src/component/InitializeIco.js

import React, { useState } from 'react';
import { useConnection, useWallet } from '@solana/wallet-adapter-react';
import { PublicKey } from '@solana/web3.js';
import { getProgram, findProgramAddress } from '../utils/anchor-connection';
import * as anchor from '@project-serum/anchor';
import { Buffer } from "buffer";
window.Buffer = window.Buffer || Buffer;

const InitializeIco = ({ onInitialize }) => {
  const { connection } = useConnection();
  const wallet = useWallet();
  const [totalSupply, setTotalSupply] = useState('');
  const [tokenPrice, setTokenPrice] = useState('');
  const [startTime, setStartTime] = useState('');
  const [duration, setDuration] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const handleInitialize = async (e) => {
    e.preventDefault();
    if (!wallet.publicKey || !wallet.signTransaction) return;

    setLoading(true);
    setError('');
    setSuccess('');

    try {
      const program = getProgram(connection, wallet);
      const { publicKey: icoAccount } = await findProgramAddress(
        [anchor.utils.bytes.utf8.encode('ico')],
        program.programId
      );

      const tx = await program.methods
        .initialize(
          new anchor.BN(totalSupply),
          new anchor.BN(tokenPrice),
          new anchor.BN(Math.floor(new Date(startTime).getTime() / 1000)),
          new anchor.BN(parseInt(duration) * 24 * 60 * 60) // Convert days to seconds
        )
        .accounts({
          authority: wallet.publicKey,
          icoAccount,
          systemProgram: anchor.web3.SystemProgram.programId,
        })
        .rpc();

      setSuccess(`ICO initialized successfully! TxID: ${tx}`);
      onInitialize();
    } catch (err) {
      console.error('Error initializing ICO:', err);
      setError(`Error: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="initialize-ico">
      <h2>Initialize ICO</h2>
      <form onSubmit={handleInitialize}>
        <div className="form-group">
          <label htmlFor="totalSupply">Total Supply:</label>
          <input
            type="text"
            id="totalSupply"
            value={totalSupply}
            onChange={(e) => setTotalSupply(e.target.value)}
            placeholder="Enter total number of tokens (e.g., 1000000)"
            required
          />
          <small>Enter the total number of tokens for the ICO (integer value)</small>
        </div>
        <div className="form-group">
          <label htmlFor="tokenPrice">Token Price (lamports):</label>
          <input
            type="text"
            id="tokenPrice"
            value={tokenPrice}
            onChange={(e) => setTokenPrice(e.target.value)}
            placeholder="Enter price in lamports (e.g., 1000000 for 1 SOL)"
            required
          />
          <small>Enter the price per token in lamports (1 SOL = 1,000,000,000 lamports)</small>
        </div>
        <div className="form-group">
          <label htmlFor="startTime">Start Time:</label>
          <input
            type="datetime-local"
            id="startTime"
            value={startTime}
            onChange={(e) => setStartTime(e.target.value)}
            required
          />
          <small>Select the start date and time for the ICO</small>
        </div>
        <div className="form-group">
          <label htmlFor="duration">Duration (days):</label>
          <input
            type="number"
            id="duration"
            value={duration}
            onChange={(e) => setDuration(e.target.value)}
            min="1"
            placeholder="Enter duration in days (e.g., 30)"
            required
          />
          <small>Enter the duration of the ICO in days (integer value)</small>
        </div>
        <button type="submit" disabled={loading}>
          {loading ? 'Initializing...' : 'Initialize ICO'}
        </button>
      </form>
      {error && <div className="error-message">{error}</div>}
      {success && <div className="success-message">{success}</div>}
    </div>
  );
};

export default InitializeIco;




src/component/TokenBalance.js



import React, { useState, useEffect } from 'react';
import { useConnection, useWallet } from '@solana/wallet-adapter-react';
import { PublicKey } from '@solana/web3.js';
import { TOKEN_PROGRAM_ID } from '@solana/spl-token';
import { Buffer } from "buffer";
window.Buffer = window.Buffer || Buffer;

const TokenBalance = () => {
  const { connection } = useConnection();
  const wallet = useWallet();
  const [balance, setBalance] = useState(null);

  useEffect(() => {
    const fetchTokenBalance = async () => {
      if (!wallet.publicKey) return;

      try {
        const tokenAccounts = await connection.getParsedTokenAccountsByOwner(wallet.publicKey, {
          programId: TOKEN_PROGRAM_ID,
        });

        // Assuming the ICO token is the first token account
        if (tokenAccounts.value.length > 0) {
          const tokenBalance = tokenAccounts.value[0].account.data.parsed.info.tokenAmount.uiAmount;
          setBalance(tokenBalance);
        }
      } catch (error) {
        console.error('Error fetching token balance:', error);
      }
    };

    fetchTokenBalance();
  }, [connection, wallet]);

  if (balance === null) return null;

  return (
    <div className="token-balance">
      <h2>Your Token Balance</h2>
      <p>{balance} ICO Tokens</p>
    </div>
  );
};

export default TokenBalance;







src/utils/anchor-connection.js





import { Connection, PublicKey } from '@solana/web3.js';
import { Program, AnchorProvider } from '@project-serum/anchor';
import idl from './ico-idl.json';
import { Buffer } from "buffer";
window.Buffer = window.Buffer || Buffer;

const programID = new PublicKey('GPW34eu3rbyGriHnsGiPzpNdY28KuyHUqM7PTUFikTXT');

export const getProgram = (connection, wallet) => {
  const provider = new AnchorProvider(connection, wallet, AnchorProvider.defaultOptions());
  return new Program(idl, programID, provider);
};

export const findProgramAddress = async (seeds, programId) => {
  const [publicKey, bump] = await PublicKey.findProgramAddress(seeds, programId);
  return { publicKey, bump };
};







src/utils/formatters.js





import { Buffer } from "buffer";
window.Buffer = window.Buffer || Buffer;

export const formatLargeNumber = (number) => {
    if (typeof number === 'object' && number.toString) {
      return number.toString();
    }
    return number;
  };
  
  






src/App.js










import React from 'react';
import { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';
import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';
import { PhantomWalletAdapter } from '@solana/wallet-adapter-wallets';
import { clusterApiUrl } from '@solana/web3.js';
import Dashboard from './components/Dashboard';
import Header from './components/Header';
import Footer from './components/Footer';
import '@solana/wallet-adapter-react-ui/styles.css';
import './App.css';
import { Buffer } from "buffer";
window.Buffer = window.Buffer || Buffer;

const App = () => {
  const network = clusterApiUrl('devnet');
  const wallets = [new PhantomWalletAdapter()];

  return (
    <ConnectionProvider endpoint={network}>
      <WalletProvider wallets={wallets} autoConnect>
        <WalletModalProvider>
          <div className="app-container">
            <Header />
            <Dashboard />
            <Footer />
          </div>
        </WalletModalProvider>
      </WalletProvider>
    </ConnectionProvider>
  );
};

export default App;







So this are my all major files and I also provide smart contract also, now read the smart contract and all react js file carefully and then solve the BuyTokenPage error and others files also if needed changes the others files also

and regenerate the full files and tell me the smart contract changes process also if needed (like what is buyer field should be in buytoken, IcoAccount, authority, treasureWallet, tokenAccount, buyerTokenAccount,tokenProgram and systemProgram in the input field)


after carefully read the smart contract modify the current reactJs files and regenerate the full files all without any missing (I also changes some functionality in my current smart contract and paste fully here, base on this smart contract create a full reactjs ICO project with standard UI and without errro and also tell me where should i add programID, contract Address, Token address, token Account and other things)